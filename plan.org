#+Title: Making a Racket
* Getting Started
** Why Racket
*** Racket as a multiparadigm language
*** Racket as a language eco-system
*** Racket as a Scheme
** What is This Book About?
*** Patterns, Pragmatics, and Processes
*** Fun
    Fun for me to write and fun for you to read and implement
** Up and Running
*** Installing Racket
**** Current Releases
**** Nightly Builds
**** Building From Source
*** Setting up Racket
    - Choosing a language
*** Setting up Emacs
** The Racket System
*** Racket 
*** DrRacket
*** Raco
*** planet
*** Help
** Racket Languages
*** Racket
*** Typed Racket
*** Scheme
*** R6RS
* First Words
** Material
   - String literal
   - Defining a name for a value
   - Basic first-order functions
** Content
   - Hello world is a traditional first program. Here it is in Racket. 
   - Two expressions: Hello, name
   - Extend Hello World to have a name, as a literal string.
   - Hello world using string-append. A function call. The pattern of all Racket function calls.
   - What about using any name? A function.
* Hello World 2.0
** Material
   - Modules
   - Development process: spike, then implementation
   - Version control
* A Lightning Tour of Racket
* Testing Testing
  - Parameters
* Building Steam
  Making a build system
* Telling the World
  An offline blog system
  Files, string munging, HTML as sexp, quoting
* Optimisation
  - Optimisation can be either algorithmic, or making the best use of the machine facilities. We're looking at the later here. Algorithmic optimisation is out of scope.
  - DCT
  - Appropriate data structures
    - FlVector
  - Unsafe operations
  - Futures
* 
